generator client {
  // provider = "prisma-client"
  provider = "prisma-client-js"
  output   = "../prisma/generated-client"
  // binaryTargets = ["native"]

  // previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Voter {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  phoneNumber        String
  isVerified         Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  mfaEnabled         Boolean            @default(false)
  mfaSecret          String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  address                 Address?
  governmentId            GovernmentId?
  biometricData           BiometricData?
  identityVerification    IdentityVerification?
  eligibilityVerification EligibilityVerification?
  votes                   Vote[]
}

model Address {
  id         String @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  voterId    String @unique
  voter      Voter  @relation(fields: [voterId], references: [id])
}

model GovernmentId {
  id         String           @id @default(uuid())
  type       GovernmentIdType
  number     String
  expiryDate DateTime
  voterId    String           @unique
  voter      Voter            @relation(fields: [voterId], references: [id])
}

model BiometricData {
  id      String        @id @default(uuid())
  type    BiometricType
  hash    String
  voterId String        @unique
  voter   Voter         @relation(fields: [voterId], references: [id])
}

model IdentityVerification {
  id                   String             @id @default(uuid())
  documentType         GovernmentIdType
  documentNumber       String
  documentImage        String // Base64 encoded image
  selfieImage          String // Base64 encoded image
  verificationMethod   VerificationMethod
  verificationProvider String?
  status               VerificationStatus @default(PENDING)
  voterId              String             @unique
  voter                Voter              @relation(fields: [voterId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model EligibilityVerification {
  id                  String             @id @default(uuid())
  ageVerified         Boolean            @default(false)
  citizenshipVerified Boolean            @default(false)
  residencyVerified   Boolean            @default(false)
  duplicateCheck      Boolean            @default(false)
  status              VerificationStatus @default(PENDING)
  voterId             String             @unique
  voter               Voter              @relation(fields: [voterId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Vote {
  id        String   @id @default(uuid())
  voterId   String
  candidate String
  timestamp DateTime @default(now())
  voter     Voter    @relation(fields: [voterId], references: [id])
}

enum GovernmentIdType {
  NATIONAL_ID
  PASSPORT
  DRIVING_LICENSE
}

enum BiometricType {
  FINGERPRINT
  FACIAL
}

enum VerificationMethod {
  AUTOMATIC
  MANUAL
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}
